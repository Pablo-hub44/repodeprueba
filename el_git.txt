
Curso rapido de git

git es para la gestion de versiones

usos de git
- historial
- almacenar codigo
- trabajar en equipo
- nos permite saber cuando se introdujo un error, que comit introdujo el error

git bash emulara comandos de linux y mac

no usar la terminal de windows, usar git bash que ya viene de la instalacion de git

los comandos mas inportantes de git https://gist.github.com/dasdo/9ff71c5c0efa037441b6


---- configuracion basica
 git config --global user.name "Pablo Jose" configuramos nuestro git con nuestro nombre
 git config --global user.email pablojose0008@gmail.com  ponemos nuestro email
 git config --global core.editor "code --wait"  ponemos vscode como editor por defecto --wait q espere q nos salgamos
 git config --global -e


 core.autocrlf en windows tiene q estar en true , linux/mac el autocrlf debe esta en input

 windows CR  LF
 linux LF

 git config --global core.autocrlf true | pk estamos es windows, los de mac|linux ponen input


git config -h | nos mostrara todas las configuraciones que podemos hacer
-----

ls lista todos los archivos del directorio
pwd nos muestra la ruta de donde estamos
cd pa movernos entre directorios
cd .. pa salir de un directorio

mkdir para crear una nueva carpeta/directorio




git init inicializa la repo

ls -a muestra todo y archivos ocultos

nos apareceras los detalles de implementacion


---- flujo de trabajo --
computador | stage | commit | serve

git add seleccionamos los arhcivos que vamos a pasar a la etapa de stage
git commit      commit = compromenter

los archivos q commiteamos los ponemos al servidor que puede ser github o algun otro

git status

git add archivo2.html archivo1.html

commiteamos

forma1: git commit -m "el primer commit"

forma2: git commit (asi nos abre un archivo le ponemos un nombre en la primera linea , lo cerramos y nos hace el comit)

para borrar =  rm archivo2.html


git rm archivo2.html   asi nos agregamos agregarlo git add archivo2.html y para luego comitearlo git commit ""

-----
para restaurar un archivo borrado q vuelta a stage
git restore --staged archivo2.html   | lo regresa a stage

git restore archivo2.html   | restaura el archivo


-----

mv |origen destino| es el comando para mover archivos, aunque tambien se les puede con mv cambiar el nombre
mv archivo2.html archivo22.html    |hacemos git add a ambos y comiteamos C:

forma corta de renombrar en git
git mv archivo22.html archivo2.html   | se agrega directamente a stage


-----
.gitignore
ahi ponemos los archivos a ignorar para q no se incluyan en la repo
por lo general se llaman .env las variables de entorno



git status -s 
nos muestra el estatus de una forma un poco mas ordenada
ejem

 M .gitignore
 M archivo1.html
 M el_git.txt
 ?? archivo3.html

 aparecen en rojo cuando no estan en git add y luego de agregarlos estan en verde

 -----


 git diff
    aparece la info un poco mas visual pero medio raro, para salir de ahi es con 'q'
    git diff nos va a mostar todos los cambios q nosotros escribimos pero q no estan en la etapa de stage
    nos mostraria los cambios 

    git diff --staged | lo pone todo a stage


    ----- ver el historial de todo el repositorio

    git log
    se vera quien realizo los cambios , el correo de tal , mensajes de commit

    git --oneline
    nos mostrara el nombre de todos los commits hechos



    -----ramas en git o branches
    creamos un branch y luego de hacer lo q se deba , solicitamos hacer un merge a la rama de main(la rama principal)

          >---->--->
         /
    ----->--->--->

    git branch  | para saber en que rama estamos, por defecto estamos en la rama master

    --> para crear un a rama <--
    git branch -b ramanueva

    git branch -M main //este tambien crea la rama pero -m la asigna como principal


    cat
    con cat nos mostrara lo q tiene tal archivo en consola

    cambiando de rama simplemente ponemos el nombre de la rama
    git checkout master


    ---- poner cambios
    para traer los cambios echos cuando estabamos en la ramaB
    tenemos que estar en la rama principal osease la 'master' en este caso , sin archivos en stage , todo comiteado

    ponemos 
    git merge ramaB



    ---- subir todo a github
    creamos la repo en github seguimos los pasos

    le asignamod el origen remoto
    git remote add origin https://github.com/Pablo-hub44/repodeprueba.git

    comando para q podamos subir nuestros cambios con respecto a la rama en la que estemos trabajando
    en github no esta creada la rama , con -u creamos la rama
    git push -u origin master  / en github la rama de llama main yo le cree con master


    -----
    y asi conforme hagamos nuestro codigo
    hacer git add
    git commit ""
    y luego git push para subirlo a github :D